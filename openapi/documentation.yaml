openapi: 3.0.0
info:
  title: Task Master
  version: 1.0.0
paths:
  /login:
    post:
      summary: User login
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginReceiveRemote'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponseRemote'
        '400':
          description: Invalid credentials
  /task/{taskid}:
    get:
      summary: Get task by ID
      tags:
        - Task
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the task
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID format
        '401':
          description: Unauthorized
  /task/downtask/unfulfilled/{id}:
    get:
      summary: Get unfulfilled tasks/subtasks
      tags:
        - Task
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the task
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID format
        '401':
          description: Unauthorized
  /task/downtask/completed/{id}:
    get:
      summary: Get completed tasks/subtasks
      tags:
        - Task
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the task
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID format
        '401':
          description: Unauthorized
  /task/taskdependence/{projectid}/{taskid}:
    get:
      summary: Get tasks excluding parent and child dependencies
      tags:
        - Task
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: projectid
          schema:
            type: integer
          required: true
          description: ID of the project
        - in: path
          name: taskid
          schema:
            type: integer
          required: true
          description: ID of the task
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID format
        '401':
          description: Unauthorized
  /task/update/{id}:
    put:
      summary: Update a task
      tags:
        - Task
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated
        '400':
          description: Invalid ID format
        '401':
          description: Unauthorized
  /task:
    post:
      summary: Create a new project
      tags:
        - Project
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project created
        '403':
          description: You are not an admin or project manager
        '401':
          description: Unauthorized
  /task/{id}:
    post:
      summary: Create subtask for a given task
      tags:
        - Task
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the parent task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created
        '400':
          description: Invalid ID format
        '401':
          description: Unauthorized
  /task/{deleteid}:
    delete:
      summary: Delete a task
      tags:
        - Task
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: deleteid
          schema:
            type: integer
          required: true
          description: ID of the task
      responses:
        '200':
          description: Task deleted
        '400':
          description: Invalid ID format
        '401':
          description: Unauthorized
  /activity:
    get:
      summary: Get all activities
      operationId: getAllActivities
      tags:
        - Activity
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        '401':
          description: Unauthorized
  /user_role_project/calendar_plan/{projId}:
    get:
      summary: Get project's calendar plan
      description: Returns a list of scheduled tasks for the project
      tags:
        - UserRoleProject
      security:
        - bearerAuth: [ ]
      parameters:
        - name: projId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /user_role_project/notification:
    get:
      summary: Get user's notifications
      description: Returns a list of notifications for the user
      tags:
        - UserRoleProject
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '401':
          description: Unauthorized
  /user_role_project/excel/{projId}:
    get:
      summary: Export project tasks to Excel
      description: Exports tasks of a project to an Excel file.
      security:
        - bearerAuth: [ ]
      tags:
        - Project
      parameters:
        - name: projId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Excel file containing the tasks
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid ID format
  /user_role_project:
    post:
      summary: Add user to project or task
      description: Adds a user to a project or task, depending on the provided data
      tags:
        - UserRoleProject
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleProjectDTO'
      responses:
        '201':
          description: Created
        '403':
          description: Forbidden
        '409':
          description: Conflict
        '401':
          description: Unauthorized
  /user_role_project/{updateid}:
    put:
      summary: Update user's role in project or task
      description: Updates a user's role in a project or task, depending on the provided data
      tags:
        - UserRoleProject
      security:
        - bearerAuth: [ ]
      parameters:
        - name: updateid
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleProjectDTO'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /user_role_project/fromproject/{projectId}/{personid}:
    delete:
      summary: Remove user from project
      description: Removes a user from a project and all its tasks
      tags:
        - UserRoleProject
      security:
        - bearerAuth: [ ]
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: personid
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /user_role_project/fromtask/{taskId}/{personid}:
    delete:
      summary: Remove user from task
      description: Removes a user from a task
      tags:
        - UserRoleProject
      security:
        - bearerAuth: [ ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: personid
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /user_role_project/project:
    get:
      summary: Get list project
      operationId: getListProject
      tags:
        - Project
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
  /person:
    get:
      summary: Get all persons
      description: Returns a list of all persons in the system
      tags:
        - Person
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDTO'
        '401':
          description: Unauthorized
    post:
      summary: Create a new person
      description: Creates a new person in the system
      tags:
        - Person
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonDTO'
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
  /person/freeperson/{projId}:
    get:
      summary: Get free persons for a project
      description: Returns a list of persons that are not assigned to the project
      tags:
        - Person
      security:
        - bearerAuth: [ ]
      parameters:
        - name: projId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDTO'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /person/freepersontask/{taskId}:
    get:
      summary: Get free persons for a task
      description: Returns a list of persons that are not assigned to the task
      tags:
        - Person
      security:
        - bearerAuth: [ ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDTO'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /person/personintask/{taskId}:
    get:
      summary: Get persons in a task
      description: Returns a list of persons that are assigned to the task
      tags:
        - Person
      security:
        - bearerAuth: [ ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDTO'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /person/personinproject/{projectId}:
    get:
      summary: Get persons in a project
      description: Returns a list of persons that are assigned to the project
      tags:
        - Person
      security:
        - bearerAuth: [ ]
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDTO'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /person/{id}:
    delete:
      summary: Delete a person
      description: Deletes a person from the system by ID
      tags:
        - Person
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /type_of_activity:
    get:
      summary: Get all types of activity
      description: Returns a list of all types of activity in the system
      tags:
        - Type of Activity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Type_of_activity'
        '401':
          description: Unauthorized
  /status:
    get:
      summary: Get all types of activity
      description: Returns a list of all types of status fot task in the system
      tags:
        - Status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        '401':
          description: Unauthorized
  /manhours/{id}:
    post:
      summary: Create man-hours entry
      description: Creates a new man-hours entry.
      tags:
        - Man Hours
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManHoursDTO'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Man-hours created
        '401':
          description: Unauthorized
    put:
      summary: Update man-hours entry
      description: Updates an existing man-hours entry by ID.
      tags:
        - Man Hours
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManHoursDTO'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    get:
      summary: Fetch man-hours entry
      description: Fetches man-hours entry by ID.
      tags:
        - Man Hours
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManHoursDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    delete:
      summary: Delete man-hours entry
      description: Deletes an existing man-hours entry by ID.
      tags:
        - Man Hours
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /manhours/specific/{manhoursid}:
    get:
      summary: Fetch specific man-hours entry
      description: Fetches a specific man-hours entry by manhours ID.
      tags:
        - Man Hours
      security:
        - bearerAuth: [ ]
      parameters:
        - name: manhoursid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManHoursDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /manhours/report/{projId}:
    get:
      summary: Fetch report by project ID
      description: Generates a report for man-hours by project ID.
      tags:
        - Man Hours
      security:
        - bearerAuth: [ ]
      parameters:
        - name: projId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /manhours/excelreport/{projId}:
    get:
      summary: Fetch Excel report by project ID
      description: Generates an Excel report for man-hours by project ID.
      tags:
        - Man Hours
      security:
        - bearerAuth: [ ]
      parameters:
        - name: projId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid project ID
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /description/download/{id}/{fileId}:
    get:
      summary: Download file by ID
      description: Downloads a file associated with a description.
      tags:
        - Description
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: fileId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid ID format
  /description/upload/{id}:
    post:
      summary: Upload file
      description: Uploads a file to the description by ID.
      tags:
        - Description
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                description:
                  type: string
      responses:
        '200':
          description: File uploaded
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Invalid ID format or file too large
  /description/{id}/{fileid}:
    delete:
      summary: Delete file by ID
      description: Deletes a specific file associated with a description by file ID.
      tags:
        - Description
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: fileid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File deleted
        '400':
          description: Invalid ID format
  /description/{id}:
    get:
      summary: Get description by ID
      description: Returns a description along with its associated files by description ID.
      tags:
        - Description
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescriptionDTOFileDTO'
        '400':
          description: Invalid ID format or description not found
  /dependence:
    post:
      summary: Create dependence
      description: Creates a new dependence.
      tags:
        - Dependence
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dependence'
      responses:
        '201':
          description: Dependence created
        '401':
          description: Unauthorized
  /dependence/{dependsOn}:
    delete:
      summary: Delete dependence
      description: Deletes a dependence specified by the dependsOn parameter.
      tags:
        - Dependence
      security:
        - bearerAuth: [ ]
      parameters:
        - name: dependsOn
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Dependence deleted
        '401':
          description: Unauthorized
        '404':
          description: Not Found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginReceiveRemote:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
        password:
          type: string
    RegisterResponseRemote:
      type: object
      properties:
        tokenLong:
          type: string
        adminOrProjectManager:
          type: boolean
    Activity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Project:
      type: object
      properties:
        name:
          type: string
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        status:
          type: integer
          format: int64
        start_date:
          type: string
        scope:
          type: integer
          format: int64
        parent:
          type: integer
          format: int64
        userCount:
          type: integer
          format: int64
        generation:
          type: integer
          format: int64
        content:
          type: string
        typeofactivityid:
          type: integer
          format: int64
        position:
          type: integer
          format: int64
        taskDependenceOn:
          $ref: '#/components/schemas/TaskDependenceOn'
    TaskCreate:
      type: object
      properties:
        name:
          type: string
        scope:
          type: integer
          format: int64
        typeofactivityid:
          type: integer
          format: int64
    TaskDependenceOn:
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        name:
          type: string
          nullable: true
    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        status:
          type: string
        date:
          type: string
          format: date-time
        user_id:
          type: integer
          format: int32
    UserRoleProjectDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        userid:
          type: integer
          format: int32
        projectid:
          type: integer
          format: int32
        current_task_id:
          type: integer
          format: int32
    PersonDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        surname:
          type: string
        name:
          type: string
        patronymic:
          type: string
        role:
          type: string
    Type_of_activity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ManHoursDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "11/07/2024"
        hours_spent:
          type: string
          example: "0030"
        comment:
          type: string
          example: "Completed task"
        taskid:
          type: integer
          example: 101
        projectid:
          type: integer
          example: 202
        activityid:
          type: integer
          example: 303
    Status:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    DescriptionDTOFileDTO:
      type: object
      properties:
        descriptionId:
          type: integer
          example: 1
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileDTO'
    FileDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "example"
        descriptionId:
          type: integer
          example: 1
        type:
          type: string
          example: "txt"
        orig_filename:
          type: string
          example: "example.txt"
    Dependence:
      type: object
      properties:
        dependsOn:
          type: integer
          example: 1
        dependent:
          type: integer
          example: 1
